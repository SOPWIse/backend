generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model SopWiseUser {
  id                 String     @id @default(uuid())
  email              String     @unique
  hash               String
  name               String?
  role               Role       @default(ADMIN)
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  metaData           Json?
  provider           String     @default("sopwise")
  approvedApprovals  Approval[] @relation("approver")
  requestedApprovals Approval[] @relation("requester")
  Sop                Sop[]
  Comment            Comment[]

  companyName         String?    @map("company_name")
  designation         String?    @map("designation")
  department          String?    @map("department")
  profilePicture      String?    @map("profile_picture")
  country             String?    @map("country")
  phoneNumber         String?    @map("phone_number")

  experimentLogs ExperimentLog[] @relation("experiment_logs")
}

model Approval {
  id             String       @id @default(uuid())
  description    String
  status         Status
  approvedBy     String?      @map("approved_by")
  allowedRole    Role[]
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  contentId      String?      @map("content_id")
  authorId       String       @map("author_id")
  approvedByUser SopWiseUser? @relation("approver", fields: [approvedBy], references: [id])
  requestedUser  SopWiseUser  @relation("requester", fields: [authorId], references: [id])
}

model Sop {
  id          String      @id @default(uuid())
  title       String
  description String
  status      String
  category    String?     @map("category")
  isListed    Boolean     @map("is_listed")
  isDeleted   Boolean     @map("is_deleted")
  publishedAt DateTime?   @map("published_at")
  metaData    Json?       @map("meta_data")
  flowData    Json?       @map("flow_data")
  authorId    String      @map("author_id")
  content     String?
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  contentUrl  String?     @map("content_url")
  author      SopWiseUser @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comment     Comment[]

  ExperimentLog ExperimentLog[] @relation("sops")


  // Newly added fields
  supercededDocumentName String?  @map("superceded_document_name")
  childDocumentName      String?  @map("child_document_name")
  authorNames            String?  @map("author_names")
  approverNames          String?  @map("approver_names")
  labDirector            String?  @map("lab_director")
  department             String?  @map("department")
  division               String?  @map("division")
  documentNumber         String?  @map("document_number")
  supercededDocumentNumber String? @map("superceded_document_number")
  versionNumber          String?  @map("version_number")
  capChecklistNumber     String?  @map("cap_checklist_number")
  isoChecklistNumber     String?  @map("iso_checklist_number")
  effectiveDate          DateTime? @map("effective_date")
  revisionDate           DateTime? @map("revision_date")
  approvedLocations      String?  @map("approved_locations")
  affectedPositions      String?  @map("affected_positions")
  affectedSites          String?  @map("affected_sites")
  affectedDepartments    String?  @map("affected_departments")
  companyUrl             String? @map("company_logo_url")
}

model FileSettings {
  id         String   @id
  userId     String
  file       String
  title      String
  visibility String
  category   String   @default("SOP")
  createdAt  DateTime @default(now())
  updatedAt  DateTime
}

model Comment {
  id           String   @id @default(uuid())
  comment      String
  status       String
  authorId     String   @map("author_id")
  contentId    String   @map("sop_id")
  uniqueId     String
  selectedText String?  @map("selected_text")
  htmlString   String?  @map("html_string")
  isDeleted    Boolean  @default(false) @map("is_deleted")
  parentId     String?  @map("parent_id")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  author  SopWiseUser @relation(fields: [authorId], references: [id], onDelete: Cascade)
  sop     Sop         @relation(fields: [contentId], references: [id], onDelete: Cascade)
  parent  Comment?    @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies Comment[]   @relation("CommentReplies")

  @@map("comments")
}

model ExperimentLog {
  id                    String   @id @default(uuid())
  sopId                 String   @map("sop_id")
  userId                String   @map("user_id")
  status                String   @default("PENDING")
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")
  tenant                String   @default("sopwise")
  total_time            Float?
  meta_data             Json?    @map("meta_data")
  completion_percentage Float?
  url                   String?

  // New relations added
  user SopWiseUser @relation("experiment_logs", fields: [userId], references: [id], onDelete: Cascade)
  sop  Sop         @relation("sops", fields: [sopId], references: [id], onDelete: Cascade)

  steps Step[]

  @@map("experiment_logs")
}

model Step {
  id         String        @id @default(uuid())
  logId      String        @map("log_id")
  time_taken Float?
  title      String?
  subtitle   String?
  tenant     String        @default("sopwise")
  createdAt  DateTime      @default(now()) @map("created_at")
  updatedAt  DateTime      @updatedAt @map("updated_at")
  form_data  Json?         @map("form_data")
  meta_data  Json?         @map("meta_data")
  log        ExperimentLog @relation(fields: [logId], references: [id], onDelete: Cascade)



  @@map("steps")
}

enum Role {
  ADMIN
  AUTHOR
  ASSISTANT
  TECHNICIAN
  SCIENTIST
  VP
}

enum Status {
  PENDING
  APPROVED
  REJECTED
}
