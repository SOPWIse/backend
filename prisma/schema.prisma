generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model SopWiseUser {
  id        String   @id @default(uuid())
  email     String   @unique
  hash      String
  name      String?
  role      Role     @default(ASSISTANT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  metaData  Json?
  provider  String   @default("sopwise")

  approvedApprovals  Approval[] @relation("approver")
  requestedApprovals Approval[] @relation("requester")
  Sop                Sop[]
}

model Approval {
  id          String   @id @default(uuid())
  authorId    String   @map("author_id")
  description String
  status      Status
  contentId   String?  @map("content_id")
  approvedBy  String?  @map("approved_by")
  allowedRole Role[]
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  approvedByUser SopWiseUser? @relation("approver", fields: [approvedBy], references: [id])
  requestedUser  SopWiseUser  @relation("requester", fields: [authorId], references: [id])
}

model Sop {
  id          String    @id @default(uuid())
  title       String
  description String
  status      String
  category    String?   @map("category")
  isListed    Boolean   @map("is_listed")
  isDeleted   Boolean   @map("is_deleted")
  publishedAt DateTime? @map("published_at")
  metaData    Json?     @map("meta_data")
  authorId    String    @map("author_id")
  content     String?   @db.Text
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  contentUrl  String?   @map("content_url")

  author SopWiseUser @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

enum Role {
  ADMIN
  AUTHOR
  ASSISTANT
}

enum Status {
  PENDING
  APPROVED
  REJECTED
}
